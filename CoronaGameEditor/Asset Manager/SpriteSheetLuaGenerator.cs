using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

using Krea.CoronaClasses;
using Krea.Packing;
using System.Drawing;
namespace Krea.Asset_Manager
{
    class SpriteSheetLuaGenerator
    {

        //---------------------------------------------------
        //-------------------Constantes--------------------
        //---------------------------------------------------
        const String HEADER_LUA = @" module(...)
    -- This file is for use with Corona Game Edition
    -- 
    -- The function getSpriteSheetData() returns a table suitable for importing using sprite.newSpriteSheetFromData()
    -- 
    -- This file is automatically generated with TexturePacker (http://texturepacker.com). Do not edit
    -- 
    -- 
    -- Usage example:
    --			local sheetData = require 'ThisFile.lua'
    --          local data = sheetData.getSpriteSheetData()
    --			local spriteSheet = sprite.newSpriteSheetFromData( 'Untitled.png', data )
    -- 
    -- For more details, see http://developer.anscamobile.com/content/game-edition-sprite-sheets

    function getSpriteSheetData()
        local sheet = {
            frames = {

            ";


        const String FOOTER_LUA = @"
                }
            }
            return sheet
        end";


        //---------------------------------------------------
        //-------------------Attributs--------------------
        //---------------------------------------------------
        public CoronaSpriteSheet SpriteSheet;
        private CoronaGameProject currentProject;
        //---------------------------------------------------
        //-------------------Constructeurs--------------------
        //---------------------------------------------------
        public SpriteSheetLuaGenerator(CoronaSpriteSheet SpriteSheet,CoronaGameProject currentProject)
        {
            this.SpriteSheet = SpriteSheet;
            this.currentProject = currentProject;

        }

        //---------------------------------------------------
        //-------------------Methodes--------------------
        //---------------------------------------------------

        public void setSpriteSheet(CoronaSpriteSheet SpriteSheet)
        {
            this.SpriteSheet = SpriteSheet;
        }

        public void writeToLua(DirectoryInfo directoryDest,string suffix, float XRatio, float YRatio)
        {
            try
            {
                if (this.SpriteSheet != null)
                {
                    ArevaloRectanglePacker packer = null;

                    Bitmap bitmapTemp = null;


                    bool ok = false;
                    try
                    {
                        bitmapTemp = new Bitmap(4096, 4096);
                        packer = new ArevaloRectanglePacker(4096, 4096);
                        ok = true;
                    
                    }
                    catch (Exception e1)
                    {
                        ok = false;
                    }

                    if (ok == false)
                    {
                        try
                        {
                            bitmapTemp = new Bitmap(2048, 2048);
                            packer = new ArevaloRectanglePacker(2048, 2048);
                            ok = true;

                        }
                        catch (Exception e2)
                        {
                            ok = false;
                        }
                    }

                    if (ok == false)
                    {
                        try
                        {
                            bitmapTemp = new Bitmap(1024, 1024);
                            packer = new ArevaloRectanglePacker(1024, 1024);
                            ok = true;
                        }
                        catch (Exception e3)
                        {
                            ok = false;
                        }
                    }

                    if (ok == false)
                    {
                        System.Windows.MessageBox.Show("Error during the \"" + this.SpriteSheet.Name + "\" sprite sheet creation!\n The system does not allow to create image bigger than 1024x1024! Please check your memory available!", "Warning", System.Windows.MessageBoxButton.OK,
                            System.Windows.MessageBoxImage.Error);
                        return;
                    }

                    int maxWidth = 0;
                    int maxHeight = 0;

                   

                    String FinalString = HEADER_LUA;

                    String framesLua = "";
                    float frameFactor = this.SpriteSheet.FramesFactor;
                    //Parcourir la liste des frames de la sprite sheet

                    using (Graphics g = Graphics.FromImage(bitmapTemp))
                    {
                        for (int i = 0; i < this.SpriteSheet.Frames.Count; i++)
                        {
                           

                            SpriteFrame frame = this.SpriteSheet.Frames[i];

                            double width = Math.Ceiling(((float)frame.ImageSize.Width / frameFactor * XRatio));
                            double height = Math.Ceiling(((float)frame.ImageSize.Height / frameFactor * YRatio));

                            Point pDest = Point.Empty;
                            bool res = packer.TryPack((int)width, (int)height, out pDest);
                            if (res == true)
                            {
                              

                                

                                Image finalImg = null;
                                
                                string sheetPath = Path.Combine(this.currentProject.ProjectPath + "\\Resources\\SpriteSheets", this.SpriteSheet.Name);
                                string framePath = sheetPath + "\\" + this.SpriteSheet.Name + "_frame" + i + ".png";
                                if (System.IO.File.Exists(framePath))
                                {
                                    finalImg = Image.FromFile(framePath);

                                }
                                

                                if (finalImg != null)
                                {
                                    if (pDest.X + width > maxWidth)
                                        maxWidth = pDest.X + (int)width;

                                    if (pDest.Y + height > maxHeight)
                                        maxHeight = pDest.Y + (int)height;

                                    g.DrawImage(finalImg, new Rectangle(pDest, new Size((int)width, (int)height)));

                                    finalImg.Dispose();
                                    finalImg = null;

                                    framesLua += "{ \n";

                                    framesLua += " name = \"" + frame.NomFrame + "\", \n";

                                    framesLua += " spriteColorRect = { x = 0,y = 0, width = " + width + ", height = " + height + "},\n";

                                    framesLua += " textureRect = { x = " + pDest.X + ", y = " + pDest.Y +
                                       ", width = " + width + ", height = " + height + "},\n";

                                    framesLua += " spriteSourceSize = { width = " + width + ", height = " + height + "},\n";

                                    framesLua += " spriteTrimmed = true, \n";
                                    framesLua += " spriteRotated = false \n";

                                    framesLua += "}, \n";
                                }
                                else
                                {
                                    System.Windows.MessageBox.Show("Cannot find frame " + i + " image in \"" + this.SpriteSheet.Name + "\" resources folder!",
                                        "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);

                                   
                                }

                                
                            }
                            else
                            {
                                System.Windows.MessageBox.Show("Cannot packing frame "+i+" in \"" + this.SpriteSheet.Name + "\" sprite sheet because the image size needed is bigger than the size authorized by your system or by Corona: 4096x4096!\n Please try to reduce the size of your animation!",
                                    "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);

                                break;
                            }
                        }

                        g.Dispose();
                        
                    }

                    Bitmap finalSheet = bitmapTemp.Clone(new Rectangle(0, 0, maxWidth, maxHeight), System.Drawing.Imaging.PixelFormat.Format32bppArgb);
                    bitmapTemp.Dispose();
                    bitmapTemp = null;

                    finalSheet.Save(directoryDest.FullName + "\\" + this.SpriteSheet.Name.Replace(" ", "_").ToLower() + suffix + ".png",
                        System.Drawing.Imaging.ImageFormat.Png);
                    finalSheet.Dispose();
                    finalSheet = null;

                    //Ajouter les frames a l'entete
                    FinalString = FinalString + framesLua;

                    //Ajouter le pied de page
                    FinalString = FinalString + FOOTER_LUA;

                    //Ecrire dans le fichier

                    File.WriteAllText(directoryDest.FullName + "\\sprite" + this.SpriteSheet.Name.Replace(" ", "").ToLower() + "anim" + suffix + ".lua",
                        FinalString);

                    packer = null;
                }

               
            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show("Error during the \"" + this.SpriteSheet.Name + "\" sprite sheet creation!\n" + ex.Message, "Error", System.Windows.MessageBoxButton.OK,
                    System.Windows.MessageBoxImage.Error);
            }
           

        }
    }
}
