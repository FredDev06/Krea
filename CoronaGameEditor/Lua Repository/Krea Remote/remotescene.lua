local storyboard = require( "storyboard" )
local scene = storyboard.newScene()

--============================================================================================
-- Begin of auto-generated section for REQUIRES: DO NOT MODIFY
--============================================================================================
--##KREA:Requires:Begin##
local objectInstance = require("object")

--##KREA:Requires:End##
--============================================================================================
-- END of auto-generated section for REQUIRES
--============================================================================================

--============================================================================================
-- Begin of auto-generated section for LOCAL VARIABLES: DO NOT MODIFY
--============================================================================================
--##KREA:LocalVars:Begin##

storyboard.deviceXRatio = 0
storyboard.deviceYRatio = 0

---------- INITIALIZE KREA ASSET RESOURCES HIERARCHY: remotescene ----------
if(not storyboard.resources) then storyboard.resources = {} end
storyboard.resources.remotescene = {}
local remotescene = storyboard.resources.remotescene

remotescene.Layer0 = {}
local Layer0 = remotescene.Layer0


--##KREA:LocalVars:End##
--============================================================================================
-- END of auto-generated section for LOCAL VARIABLES
--============================================================================================

--============================================================================================
-- 
-- NOTE:
-- 
-- Code outside of listener functions (below) will only be executed once,
-- unless storyboard.removeScene() is called.
-- 
--============================================================================================

--============================================================================================
-- BEGINNING OF YOUR IMPLEMENTATION
--============================================================================================
local remoteControllerInstance = require("remotecontroler")

local onTouchBt = function(event)
	if(event.phase == "began") then 
		local remoteControler,errorsLog = remoteControllerInstance.RemoteControler.create(storyboard.remoteParams)
		
		for i = 1,#errorsLog do 
			print(errorsLog[i])
		end
		
		if(storyboard.sceneAfterRemoteScene) then 
			storyboard.gotoScene(storyboard.sceneAfterRemoteScene)
		end
	end
end

-- Called when the scene's view does not exist:
function scene:createScene( event )
	local group = self.view

--===================================================================

-- CREATE display objects and add them to 'group' here.
-- Example use-case: Restore 'group' from previously saved state.

--===================================================================
	--Call the CGE initializeComponents Auto Generate Code
	initializeComponents(group)
	
end

-- Called BEFORE scene has moved onscreen:
function scene:willEnterScene( event )
	local group = self.view

	--===================================================================
	-- CODE BELOW IS AUTO-GENERATED BY KREA: DO NOT MODIFY!
	--===================================================================
	--##KREA:WillEnterScene:Begin##
	group:translate(-301,-160)
	--##KREA:WillEnterScene:End##
	--===================================================================
	-- CODE ABOVE IS AUTO-GENERATED BY KREA: DO NOT MODIFY!
	--===================================================================

end

-- Called immediately after scene has moved onscreen:
function scene:enterScene( event )
	local group = self.view

--===================================================================

-- INSERT code here (e.g. start timers, load audio, start listeners, etc.)

--===================================================================
	--===================================================================
	-- Begin of restoring Components: DO NOT MODIFY
	--===================================================================
	--##KREA:EnterScene:Begin##
	display.setStatusBar(display.HiddenStatusBar)
	---------- ACTIVATE SCENE: remotescene ----------
	-----------Pause all objects listeners ------------
	Layer0.remoteBack:startInteractions()
	Layer0.connectBt:startInteractions()
	Layer0.shape2:startInteractions()
	-----------Pause all controls ------------
	--##KREA:EnterScene:End##
	--===================================================================
	-- End of restoring Components
	--===================================================================
	Layer0.connectBt.object:addEventListener("touch",onTouchBt)
end


-- Called when scene is about to move offscreen:
function scene:exitScene( event )
	local group = self.view

--===================================================================

-- INSERT code here (e.g. stop timers, remove listeners, unload sounds, etc.)

--===================================================================
	--===================================================================
	-- Begin of pausing Components: DO NOT MODIFY
	--===================================================================
	--##KREA:ExitScene:Begin##
	---------- DEACTIVATE SCENE: remotescene ----------
	-----------Pause all objects listeners ------------
	Layer0.remoteBack:pauseInteractions()
	Layer0.connectBt:pauseInteractions()
	Layer0.shape2:pauseInteractions()
	-----------Pause all controls ------------
	--##KREA:ExitScene:End##
	--===================================================================
	-- End of pausing Components
	--===================================================================
	
	Layer0.connectBt.object:removeEventListener("touch",onTouchBt)
end

-- Called AFTER scene has finished moving offscreen:
function scene:didExitScene( event )
	local group = self.view

	--===================================================================
	-- CODE BELOW IS AUTO-GENERATED BY KREA: DO NOT MODIFY!
	--===================================================================
	--##KREA:DidExitScene:Begin##

	--##KREA:DidExitScene:End##
	--===================================================================
	-- CODE ABOVE IS AUTO-GENERATED BY KREA: DO NOT MODIFY!
	--===================================================================
end
-- Called prior to the removal of scene's "view" (display group)
function scene:destroyScene( event )
	local group = self.view

--===================================================================

-- INSERT code here (e.g. remove listeners, widgets, save state, etc.)

--===================================================================
	---===================================================================
	-- Begin of clean Components: DO NOT MODIFY
	--===================================================================
	--##KREA:DestroyScene:Begin##
	---------- CLEAN SCENE: remotescene ----------
	Layer0.remoteBack:clean()
	Layer0.remoteBack = nil
	Layer0.connectBt:clean()
	Layer0.connectBt = nil
	Layer0.shape2:clean()
	Layer0.shape2 = nil
	collectgarbage("collect")
	--##KREA:DestroyScene:End##
	--===================================================================
	-- End of clean Components
	--===================================================================
	
end

-- Called if/when overlay scene is displayed via storyboard.showOverlay()
function scene:overlayBegan( event )
	local group = self.view
	local overlay_name = event.sceneName  -- name of the overlay scene

	---==================================================================
	-- CODE BELOW IS AUTO-GENERATED BY KREA: DO NOT MODIFY!
	--===================================================================
	--##KREA:OverlayBegan:Begin##

	--##KREA:OverlayBegan:End##
	--===================================================================
	-- CODE ABOVE IS AUTO-GENERATED BY KREA: DO NOT MODIFY!
	--===================================================================

end


-- Called if/when overlay scene is hidden/removed via storyboard.hideOverlay()
function scene:overlayEnded( event )
	local group = self.view
	local overlay_name = event.sceneName  -- name of the overlay scene

	---==================================================================
	-- CODE BELOW IS AUTO-GENERATED BY KREA: DO NOT MODIFY!
	--===================================================================
	--##KREA:OverlayEnded:Begin##

	--##KREA:OverlayEnded:End##
	--===================================================================
	-- CODE ABOVE IS AUTO-GENERATED BY KREA: DO NOT MODIFY!
	--===================================================================

end

--====================================================================================
-- Krea auto generate Code
-- InitializeComponents()
--
-- DO NOT MODIFY THIS PART !
--====================================================================================
function initializeComponents(localGroup)
	--===================================================================
	-- Begin of Initialize Components: DO NOT MODIFY
	--===================================================================
	--##KREA:InitializeComponents:Begin##
	deviceXRatio = 1
	deviceYRatio = 1


	Layer0.displayGroup = display.newGroup()
	localGroup:insert(Layer0.displayGroup)
	local params_remoteBack = {}
	params_remoteBack.name = "remoteBack"
	params_remoteBack.type = "IMAGE" 
	params_remoteBack.isHandledByTilesMap = false
	params_remoteBack.x = 167
	params_remoteBack.y = 116
	params_remoteBack.width = 549
	params_remoteBack.height = 648
	params_remoteBack.blendMode = "normal"
	params_remoteBack.rotation = 0
	params_remoteBack.alpha = 1
	params_remoteBack.gradient = nil
	params_remoteBack.pathImage = "remoteback.png"
	params_remoteBack.displayGroupParent = Layer0.displayGroup

	params_remoteBack.isDraggable = false
	Layer0.remoteBack = objectInstance.Object.create(params_remoteBack)
	Layer0.remoteBack.object:setFillColor(255,255,255)
	local params_connectBt = {}
	params_connectBt.name = "connectBt"
	params_connectBt.type = "RECTANGLE" 
	params_connectBt.isHandledByTilesMap = false
	params_connectBt.isRounded = true
	params_connectBt.x = 394
	params_connectBt.y = 385
	params_connectBt.width = 130
	params_connectBt.height = 57
	params_connectBt.rotation = 0
	params_connectBt.blendMode = "normal"
	params_connectBt.gradient = nil
	params_connectBt.alpha = 1
	params_connectBt.cornerRadius = 6
	params_connectBt.backColor = { R = 255,G = 255, B = 224}
	params_connectBt.strokeColor = { R = 255,G = 140, B = 0}
	params_connectBt.strokeWidth = 4
	params_connectBt.displayGroupParent = Layer0.displayGroup

	params_connectBt.isDraggable = false
	Layer0.connectBt = objectInstance.Object.create(params_connectBt)
	local params_shape2 = {}
	params_shape2.name = "shape2"
	params_shape2.type = "TEXT" 
	params_shape2.isHandledByTilesMap = false
	params_shape2.x = 421
	params_shape2.y = 395
	params_shape2.text = "Start"
	params_shape2.rotation = -1
	params_shape2.blendMode = "normal"
	params_shape2.alpha = 1
	params_shape2.gradient = nil
	params_shape2.textColor = { R = 0,G = 0, B = 0}
	params_shape2.textSize = 32.2
	params_shape2.textFont = font
	params_shape2.displayGroupParent = Layer0.displayGroup

	params_shape2.isDraggable = false
	Layer0.shape2 = objectInstance.Object.create(params_shape2)
	
	--##KREA:InitializeComponents:End##	
	--===================================================================
	-- End of Initialize Components
	--===================================================================
end

---------------------------------------------------------------------------------
-- END OF YOUR IMPLEMENTATION
---------------------------------------------------------------------------------

-- "createScene" event is dispatched if scene's view does not exist
scene:addEventListener( "createScene", scene )

-- "willEnterScene" event is dispatched before scene transition begins
scene:addEventListener( "willEnterScene", scene )

-- "enterScene" event is dispatched whenever scene transition has finished
scene:addEventListener( "enterScene", scene )

-- "exitScene" event is dispatched before next scene's transition begins
scene:addEventListener( "exitScene", scene )

-- "didExitScene" event is dispatched after scene has finished transitioning out
scene:addEventListener( "didExitScene", scene )

-- "destroyScene" event is dispatched before view is unloaded, which can be
-- automatically unloaded in low memory situations, or explicitly via a call to
-- storyboard.purgeScene() or storyboard.removeScene().
scene:addEventListener( "destroyScene", scene )

-- "overlayBegan" event is dispatched when an overlay scene is shown
scene:addEventListener( "overlayBegan", scene )

-- "overlayEnded" event is dispatched when an overlay scene is hidden/removed
scene:addEventListener( "overlayEnded", scene )

---------------------------------------------------------------------------------

return scene